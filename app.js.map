{"version":3,"sources":["app/magnify.js","app/zoom.js"],"names":[],"mappingstmBA;AAAA","file":"app.js","sourcesContent":["/**\n * @author Jeremie Ges <jges@weblinc.com>\n */\n(function($) {\n\n  function Magnify() {\n\n      /**\n       * DOM accessors\n       * @type {Object}\n       */\n      this.$dom = {\n          container: null,\n          image: null\n      },\n\n      /**\n       * Keep track of things\n       * @type {Object}\n       */\n      this.flags = {\n          imageLoaded: false,\n      },\n\n      /**\n       * Contains every options of $.fn.magnify.defaults\n       * merged with the options provided by the user\n       * @type {Object}\n       */\n      this.options = {},\n\n      /**\n       * Initialize the widget with the right options,\n       * scope (container) and boot\n       * @param {HTMLElement} container - The container of the zoom element\n       * @param {Object} options - The options provided by the user\n       */\n      this.init = function(container, options) {\n          this.$dom.container = $(container);\n          this.options = _.extend($.fn.magnify.defaults, options);\n          this.setup();\n          this.events();\n      },\n\n      /**\n       * Setup minimal dependencies\n       */\n      this.setup = function() {\n          this.setupImage();\n      },\n\n      /**\n       * Create a blank <img> tag which\n       * will be used as the zoom image.\n       */\n      this.setupImage = function() {\n          this.$dom.image = $('<img/>');\n      },\n\n      /**\n       * Attach events and start listen\n       */\n      this.events = function() {\n          this.$dom.image.on('load', this.onLoadImage.bind(this));\n\n          this.$dom.container\n            .on('mouseenter', this.onEnterContainer.bind(this))\n            .on('mouseleave', this.onLeaveContainer.bind(this))\n            .on('mousemove', this.onMoveContainer.bind(this));\n\n          if (this.options.touchSupport) {\n            this.$dom.container\n              .on('touchstart', this.onEnterContainer.bind(this))\n              .on('touchend', this.onLeaveContainer.bind(this))\n              .on('touchmove', this.onMoveContainer.bind(this));\n          }\n\n          this.$dom.container.on('magnify.destroy', this.destroy.bind(this));\n      },\n\n      /**\n       * Callback when the zoom image is loaded\n       */\n      this.onLoadImage = function() {\n          // Insert zoom image in page\n          this.$dom.image\n              .css({\n                  position: 'absolute',\n                  top: 0,\n                  left: 0,\n                  width: this.$dom.image.get(0).width,\n                  height: this.$dom.image.get(0).height,\n                  border: 'none',\n                  maxWidth: 'none',\n                  maxHeight: 'none',\n              })\n              .attr('role', 'presentation')\n              .appendTo(this.$dom.container);\n\n          this.$dom.container.css('overflow', 'hidden');\n          this.flags.imageLoaded = true;\n      },\n\n      /**\n       * Callback when the mouse / finger enters inside\n       * the container\n       */\n      this.onEnterContainer = function(e) {\n          e.preventDefault();\n\n          if (!this.flags.imageLoaded) {\n            this.loadImage();\n          }\n\n          this.showImage();\n      },\n\n      /**\n       * Callback when the mouse / finger leaves\n       * the container\n       */\n      this.onLeaveContainer = function(e) {\n        e.preventDefault();\n        this.hideImage();\n      },\n\n      /**\n       * Callback when the mouse / finger is moving\n       * in the container\n       */\n      this.onMoveContainer = function(e) {\n        e.preventDefault();\n        this.refreshPositionImage(e);\n      },\n\n      /**\n       * Depending the current position of the mouse / finger,\n       * moves the properties top/left of the zoom image. \n       */\n      this.refreshPositionImage = function(e) {\n          var pageX = e.pageX || e.originalEvent.pageX,\n              pageY = e.pageY || e.originalEvent.pageY,\n              containerOffset = this.$dom.container.offset(),\n              containerWidth = this.$dom.container.outerWidth(),\n              containerHeight = this.$dom.container.outerHeight(),\n              xRatio = (this.$dom.image.prop('width') - containerWidth) / containerWidth,\n              yRatio = (this.$dom.image.prop('height') - containerHeight) / containerHeight,\n              top = (pageY - containerOffset.top),\n              left = (pageX - containerOffset.left);\n\n        top = Math.max(Math.min(top, containerHeight), 0);\n        left = Math.max(Math.min(left, containerWidth), 0);\n\n        this.$dom.image.css({\n          top: (top * -yRatio) + 'px',\n          left: (left * -xRatio) + 'px'\n        });\n      },\n\n      /**\n       * Add the attribute src of the zoom image,\n       * therefore it triggers the load of the zoom\n       * image.\n       */\n      this.loadImage = function() {\n        this.$dom.image.attr('src', this.getUrlImage());\n      },\n\n      /**\n       * Hide the zoom image\n       */\n      this.hideImage = function() {\n        this.$dom.image.css('opacity', 0);\n      },\n\n      /**\n       * Show the zoom image\n       */\n      this.showImage = function() {\n        this.$dom.image.css('opacity', 1);\n      },\n\n      /**\n       * Get the src url of the zoom image\n       */\n      this.getUrlImage = function() {\n        if (!_.isEmpty(this.options.source)) {\n          return this.options.source;\n        }\n\n        return this.$dom.container.find('img').first().data('magnify-source');\n      },\n\n      /**\n       * Teardown the changes\n       */\n      this.destroy = function() {\n        this.$dom.container.off('mouseenter mouseleave mousemove magnify.destroy');\n        this.$dom.image.off('load');\n        this.$dom.image.remove();\n        this.$dom.container.css('overflow', '');\n      }\n  }\n\n  /**\n   * Public jQuery API\n   */\n  \n  $.fn.magnify = function(options) {\n\n      var options = options || {};\n\n      return this.each(function() {\n          new Magnify().init(this, options);\n      });\n  };\n\n  $.fn.magnify.defaults = {\n\n    /**\n     * The url of the zoom image. \n     * If not specified, the plugin will look for the data attribute\n     * data-magnify-source on the thumbnail <img>.\n     * @type {String}\n     */\n    source: null,\n\n    /**\n     * Do you want to enable finger gestures on\n     * touch-enabled devices?\n     * @type {Boolean}\n     */\n    touchSupport: true\n  };\n\n})(window.jQuery);","/**\n * @author Jeremie Ges <jges@weblinc.com>\n */\n(function($) {\n    function Zoom() {\n\n        /**\n         * Cache DOM properties\n         * @type {Object}\n         */\n        this.$dom = {\n            container: null,\n            image: null,\n            thumbnail: null\n        },\n\n        /**\n         * Keep track of things\n         * @type {Object}\n         */\n        this.flags = {\n\n            /**\n             * The current scale\n             * @type {Number}\n             */\n            currentScale: 1,\n\n            /**\n             * Check if the zoom image is loaded\n             * @type {Boolean}\n             */\n            imageLoaded: false,\n\n            /**\n             * We use \"transform: translate()\" to \"move\" the\n             * zoom image (for smooth animations). When X or Y\n             * change, we update this property.\n             * @type {Object}\n             */\n            imageTranslate: {\n                x: 0,\n                y: 0\n            },\n\n            /**\n             * When the user starts to pinch, we keep track of the \n             * coordinates and \"freeze\" theù until the pinch stops.\n             * Therefore the scale up / down is smoother.\n             * @type {Object}\n             */\n            pinchCoordinates: {\n                x: 0,\n                y: 0\n            },\n\n            /**\n             * Flag to know if we have to scale down or scale up \n             * @type {Number}\n             */\n            pinchScale: 0,\n\n            /**\n             * The Hammer js created instance (to be able to destroy it)\n             * @type {Object}\n             */\n            hammer: null\n        },\n\n        this.options = {},\n\n        /**\n         * Main entry of the widget\n         * @param  {jQueryElement} container The scope\n         * @param  {Object}        options   The options given by the user\n         */\n        this.init = function(container, options) {\n            this.$dom.container = $(container);\n            this.options = _.extend($.fn.zoom.defaults, options);\n            this.setup();\n            this.events();\n        },\n\n        /**\n         * Setup prerequisites before to listen\n         * the events\n         */\n        this.setup = function() {\n            this.setupImage();\n            this.setupThumbnail();\n            this.setupLoadImage();\n        },\n\n        /**\n         * Create a blank image where the zoom image\n         * will be stored\n         */\n        this.setupImage = function() {\n            this.$dom.image = $('<img/>');\n        },\n\n        /**\n         * Alias the $dom property thumbnail\n         * to the right image\n         */\n        this.setupThumbnail = function() {\n            this.$dom.thumbnail = this.$dom.container.find('img').first();\n        },\n\n        /**\n         * Will load the image directly if \n         * needed.\n         */\n        this.setupLoadImage = function() {\n            if (this.options.lazyLoad) {\n                return;\n            }\n\n            this.loadImage();\n        },\n\n        /**\n         * Start to listen the events.\n         */\n        this.events = function() {\n            this.$dom.image.on('load', this.onLoadImage.bind(this));\n\n            this.getInstanceHammer(this.$dom.container.get(0))\n                .on('doubletap', this.onDoubleTapContainer.bind(this))\n                .on('pan',  this.onPanContainer.bind(this))\n                .on('pinchstart', this.onPinchStartContainer.bind(this))\n                .on('pinch', this.onPinchContainer.bind(this));\n\n            this.$dom.container.on('zoom.destroy', this.onDestroy.bind(this));\n\n            if (this.options.lazyLoad) {\n                this.$dom.container.on('click', this.onClickContainer.bind(this));\n            }\n        },\n\n        /**\n         * When the zoom image is loaded\n         */\n        this.onLoadImage = function() {\n            this.$dom.image\n                .css({\n                    opacity: 1,\n                    position: 'absolute',\n                    top: 0,\n                    left: 0,\n                    width: this.$dom.container.width(),\n                    height: this.$dom.container.outerHeight(),\n                    border: 'none',\n                    maxWidth: 'none',\n                    maxHeight: 'none',\n                    transformOrigin: '0 0',\n                    transform: 'translate(0, 0) scale(1)',\n                    transition: 'all 1s'\n                })\n                .attr('role', 'presentation')\n                .appendTo(this.$dom.container);\n\n            this.$dom.container.css('overflow', 'hidden');\n\n            this.flags.imageLoaded = true;\n        },\n\n        /**\n         * This callback is only called if the  lazyLoad option is set to true.\n         * Click on the container will trigger the load.\n         */\n        this.onClickContainer = function() {\n            this.loadImage();\n            this.$dom.container.off('click');\n        },\n\n        /**\n         * When the user start to pan on the container\n         */\n        this.onPanContainer = function(e) {\n\n            var x = this.flags.imageTranslate.x,\n                y = this.flags.imageTranslate.y,\n                newX = x - (e.deltaX / 3),\n                newY = y - (e.deltaY / 3);\n\n            e.preventDefault();\n\n            if (!this.flags.imageLoaded) {\n                return;\n            }\n\n            if (newX > 0) {\n                newX = 0;\n            }\n\n            if (newY > 0) {\n                newY = 0;\n            }\n\n            if (newX < this.getPanLimits().x) {\n                newX = this.getPanLimits().x;\n            }\n\n            if (newY < this.getPanLimits().y) {\n                newY = this.getPanLimits().y;\n            }\n\n            this.$dom.image.css({\n                transition: 'all 0s'\n            });\n\n            this.updateImage(newX, newY);\n        },\n\n        /**\n         * When the user starts to pinch the container\n         * we want to keep track of the point clicked\n         * (coordinates) to scale up / down gracefully.\n         * @param  {Event} e The pinch event\n         */\n        this.onPinchStartContainer = function(e) {\n            e.preventDefault();\n\n            if (!this.flags.imageLoaded) {\n                return;\n            }\n\n            this.$dom.image.css({\n                transition: 'all 1s'\n            });\n\n            this.flags.pinchCoordinates = e.center;\n        },\n\n        /**\n         * Guess if we have to scale up / down\n         * the zoom image on pinch\n         * @param  {Event} e The pinch event\n         */\n        this.onPinchContainer = function(e) {\n            var scale = e.scale;\n\n            e.preventDefault();\n\n            if (!this.flags.imageLoaded) {\n                return;\n            }\n\n            if (scale < this.flags.pinchScale) {\n                this.onScaleDown();\n            } else {\n                this.onScaleUp();\n            }\n\n            this.flags.pinchScale = scale;\n        },\n\n        /**\n         * Scale down the zoom image around the point\n         * clicked by the user at the start of the pinch\n         */\n        this.onScaleDown = function() {\n\n            var scale = this.flags.currentScale,\n                containerOffset = this.$dom.container.offset(),\n                mousePositionOnImageX,\n                mousePositionOnImageY,\n                offsetX,\n                offsetY,\n                x,\n                y;\n\n            if (!this.flags.imageLoaded) {\n                return;\n            }\n\n            if (scale <= 1) {\n                return;\n            }\n\n            scale = scale - this.options.deltaScale;\n\n            mousePositionOnImageX = this.flags.pinchCoordinates.x - containerOffset.left;\n            mousePositionOnImageY = this.flags.pinchCoordinates.y - containerOffset.top;\n\n            offsetX = mousePositionOnImageX * this.options.deltaScale;\n            offsetY = mousePositionOnImageY * this.options.deltaScale;\n\n            x = this.flags.imageTranslate.x < 0 ? this.flags.imageTranslate.x : 0;\n            y = this.flags.imageTranslate.y < 0 ? this.flags.imageTranslate.y : 0;\n\n            offsetX = offsetX + x;\n            offsetY = offsetY + y;\n\n            if (scale <= 1) {\n                scale = 1;\n                offsetX = 0;\n                offsetY = 0;\n            }\n\n            this.updateImage(offsetX, offsetY, scale);\n        },\n\n        /**\n         * Scale up the zoom image around the point\n         * clicked by the user at the start of the pinch\n         */\n        this.onScaleUp = function() {\n\n            var scale = this.flags.currentScale + this.options.deltaScale,\n                containerOffset = this.$dom.container.offset(),\n                offsetX,\n                offsetY,\n                mousePositionOnImageX,\n                mousePositionOnImageY;\n\n            if (!this.flags.imageLoaded) {\n                return;\n            }\n\n            if (scale > this.getScaleLimitImage()) {\n                return;\n            }\n\n            mousePositionOnImageX = (this.flags.pinchCoordinates.x - containerOffset.left);\n            mousePositionOnImageY = (this.flags.pinchCoordinates.y - containerOffset.top);\n\n            offsetX = -(mousePositionOnImageX * this.options.deltaScale);\n            offsetY = -(mousePositionOnImageY * this.options.deltaScale);\n\n            offsetX = offsetX < 0 ? offsetX + this.flags.imageTranslate.x : 0;\n            offsetY = offsetY < 0 ? offsetY + this.flags.imageTranslate.y : 0;\n\n            this.updateImage(offsetX, offsetY, scale);\n        },\n\n        /**\n         * When the user double tap on the container,\n         * depending the current scale we zoom the image\n         * to its maximum or minimum\n         */\n        this.onDoubleTapContainer = function(e) {\n\n            var coordinates = e.center;\n\n            e.preventDefault();\n\n            if (!this.flags.imageLoaded) {\n                return;\n            }\n\n            this.$dom.image.css({\n                transition: 'all 1s'\n            });\n\n            if (this.flags.currentScale === 1) {\n                this.zoomMaximum(coordinates);\n            } else {\n                this.zoomMinimum();\n            }\n        },\n\n        /**\n         * Will scale up to the maximum scale allowed taking in account\n         * the focal point clicked by the user.\n         * @param  {Object} coordinates - X / Y of the point clicked\n         */\n        this.zoomMaximum = function(coordinates) {\n            var maximumScale = this.getScaleLimitImage(),\n                containerOffset = this.$dom.container.offset(),\n                mousePositionOnImageX = (coordinates.x - containerOffset.left),\n                mousePositionOnImageY = (coordinates.y - containerOffset.top),\n                offsetX = -(mousePositionOnImageX * (maximumScale - this.flags.currentScale)),\n                offsetY = -(mousePositionOnImageY * (maximumScale - this.flags.currentScale));\n\n            if (offsetY > 0) {\n                offsetY = 0;\n            }\n\n            this.updateImage(offsetX, offsetY, maximumScale);\n        },\n\n        /**\n         * Will scale down to scale 1\n         */\n        this.zoomMinimum = function() {\n            var x = 0,\n                y = 0,\n                minimumScale = 1;\n\n            this.updateImage(x, y, minimumScale);\n        },\n\n        /**\n         * Show the zoom image\n         */\n        this.showImage = function() {\n            this.$dom.image.css('opacity', 1);\n        },\n\n        /**\n         * Hide the zoom image\n         */\n        this.hideImage = function() {\n            this.$dom.image.css('opacity', 0);\n        },\n\n        /**\n         * Lazy load the image on demand.\n         */\n        this.loadImage = function() {\n            if (this.flags.imageLoaded) {\n                return;\n            }\n\n            this.$dom.image.attr('src', this.getUrlImage());\n        },\n\n        /**\n         * Apply x, y, scale to the zoom image\n         * @param  {Number} x     Translate to x\n         * @param  {Number} y     Translate to y\n         * @param  {scale}  scale The scale to apply\n         */\n        this.updateImage = function(x, y, scale) {\n            scale = scale || this.flags.currentScale;\n\n            // Let's be nice with the browser and give him\n            // rounded values.\n            x = Math.round(x);\n            y = Math.round(y);\n\n            this.$dom.image.css({\n                transform: this.getCssRuleTranslate(x, y) + ' ' + this.getCssRuleScale(scale)\n            });\n\n            // Keep track of transformations\n            this.flags.imageTranslate.y = y;\n            this.flags.imageTranslate.x = x;\n            this.flags.currentScale = scale;\n        }\n\n        /**\n         * Get the url of the zoom image to use.\n         * @return {String} Url (relative or absolute)\n         */\n        this.getUrlImage = function() {\n            var url = this.options.url;\n\n            if (!_.isEmpty(url)) {\n                return url;\n            }\n\n            // Let's find by the attribute\n            return this.$dom.container.data('zoom-src');\n        },\n\n        /**\n         * When the zoom image is scaling up, we need to know\n         * the limit of scaling to keep the perfect quality ratio.\n         * @return {Float} The scale up limit\n         */\n        this.getScaleLimitImage = function() {\n            var image = this.getNaturalDimensionsImage(),\n                scaleWidth,\n                scaleHeight,\n                limit;\n\n            scaleWidth = image.width / this.$dom.container.width();\n            scaleHeight = image.height / this.$dom.container.outerHeight();\n\n            limit = _.min([scaleWidth, scaleHeight]);\n\n            return _.round(limit, 2);\n        },\n\n        /**\n         * When the zoom image is panning (up / down / left / right),\n         * we need to know what are the limits for X and Y to avoid\n         * to pan outside of the container.\n         * @return {Object} The X / Y coordinates limits\n         */\n        this.getPanLimits = function() {\n            var xLimit = (this.$dom.image.width() * this.flags.currentScale) - this.$dom.container.width(),\n                yLimit = (this.$dom.image.height() * this.flags.currentScale) - this.$dom.container.outerHeight();\n\n            return {\n                x: -xLimit,\n                y: -yLimit\n            }\n        },\n\n        /**\n         * Get the real width / height of the thumbnail\n         * @return {Object} The width / height\n         */\n        this.getNaturalDimensionsThumbnail = function() {\n            return {\n                width: this.$dom.thumbnail.prop('naturalWidth'),\n                height: this.$dom.thumbnail.prop('naturalHeight')\n            }\n        },\n\n        /**\n         * Get the real width / height of the zoom image\n         * @return {Object} The width / height\n         */\n        this.getNaturalDimensionsImage = function() {\n            return {\n                width: this.$dom.image.prop('naturalWidth'),\n                height: this.$dom.image.prop('naturalHeight')\n            }\n        },\n\n        /**\n         * Abstraction to clean up the code.\n         * @param  {Mixed} x The X coordinates\n         * @param  {Mixed} y The Y coordinates\n         * @return {String} The css translate rule for the transform property\n         */\n        this.getCssRuleTranslate = function(x, y) {\n            return 'translate(' + x + 'px,' + y + 'px)';\n        },\n\n        /**\n         * Abstraction to clean up the code.\n         * @param  {Mixed} scale The scale\n         * @return {String} The css scale rule for the transform property\n         */\n        this.getCssRuleScale = function(scale) {\n            return 'scale(' + scale + ')';\n        },\n\n        /**\n         * Create an hammer instance for the\n         * element given with the right recognizers:\n         * Double Tap / Pinch / Pan\n         * @param {HTMLelement} element - Initialize the events to this element\n         *\n         * @example\n         * var element = document.getElementById('element');\n         * this.getInstanceHammer(element);\n         */\n        this.getInstanceHammer = function(element) {\n            var manager = new Hammer.Manager(element),\n                doubleTap = new Hammer.Tap({event: 'doubletap', taps: 2}),\n                pinch = new Hammer.Pinch(),\n                pan = new Hammer.Pan({threshold: 0});\n\n            manager.add([doubleTap, pinch, pan]);\n\n            this.flags.hammer = manager;\n\n            return manager;\n        },\n\n        /**\n         * Destroy the widget\n         */\n        this.onDestroy = function() {\n\n            // Shutdown events\n            this.$dom.image.off('load');\n            this.flags.hammer.off('doubletap pan pinchstart pinch');\n            this.$dom.container.off('zoom.destroy');\n            this.$dom.container.off('click');\n\n            // Remove added DOM\n            this.$dom.image.remove();\n        }\n    }\n\n    /**\n     * Public jQuery API\n     */\n\n    $.fn.zoom = function(options) {\n\n        var options = options || {};\n\n        return this.each(function() {\n            new Zoom().init(this, options);\n        });\n    };\n\n    $.fn.zoom.defaults = {\n\n        /**\n         * Do you want to lazy load the zoom image?\n         * We will load the zoom image when the user clicks\n         * one time on the container.\n         * @type {Boolean}\n         */\n        lazyLoad: true,\n\n        /**\n         * What is the increment scale you want to use\n         * when scale up / down.\n         * \n         * @example\n         * 1 -> 1.05 -> 1.10 -> ..\n         * \n         * @type {Number}\n         */\n        deltaScale: 0.05,\n\n        /**\n         * The url to use \n         * @type {[type]}\n         */\n        url: null\n    };\n\n}(window.jQuery));"]}